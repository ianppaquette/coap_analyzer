##! Implements base functionality for COAP analysis.
##! Generates the Coap.log file.

# Generated by binpac_quickstart

module Coap;

export {

    redef enum Log::ID += { LOG };

	## The record type which contains the column fields of the COAP log.
	type Info: record {
		## 
		ts:            time               &log;
		## 
		uid:           string             &log;
		## The connection's 4-tuple of endpoint addresses/ports.
		id:            conn_id            &log;
		## 2-bit unsigned integer.  Indicates the CoAP version number.  Implementations of this specification MUST set this field to 1 (01 binary).
		version:       count              &log &optional;
		## 2-bit unsigned integer.  Indicates if this message is of type Confirmable (0), Non-confirmable (1), Acknowledgement (2), or Reset (3).  The semantics of these message types are defined in
		typ:           count              &log &optional;
        ## 8-bit unsigned integer, split into a 3-bit class   
        code:          count              &log &optional;
        ## 16-bit unsigned integer in network byte order.       
        msgid:         count              &log &optional;
        ## 0 to 8 bytes, as given by the Token Length field.  The Token value is used to correlate requests and responses.       
        token:         string             &log &optional;
        ## An Option can be followed by the end of the message, by another Option, or by the Payload Marker and the payload.       
        options:       string             &log &optional;
        ## prefixed by a fixed, one-byte Payload Marker (0xFF), which indicates the end of options and the start of the payload. The payload data extends from after the marker to the end of the UDP datagram, i.e., the Payload Length is calculated from the datagram size.  The absence of the Payload Marker denotes a zero-length payload.  The presence of a marker followed by a zero-length payload MUST be processed as a message format error.       
        payload:       string             &log &optional;
    };

    global log_coap: event(rec:Info);
}

const ports = { 5683/udp };
redef likely_server_ports += { ports };

function initialize_coap(c: connection): Info
         {
           local l: Info;
           l$ts = network_time();
           l$uid = c$uid;
           l$id = c$id;

           return l;
         }

event zeek_init() &priority=5
	{
	    Log::create_stream(Coap::LOG, [$columns=Info, $path="coap-message"]);
        Analyzer::register_for_ports(Analyzer::ANALYZER_COAP, ports);
	}

event coap_empty%(c: connection, version: count, typ: count, code: count, msgid: count, token: string%);
    {
        c$coap= initialize_coap(c);
        c$coap$version = version;
        c$coap$typ = typ;
        c$coap$code = code;
        c$coap$msgid = msgid;
        c$coap$token = token;
        Log::write(Coap:LOG, c$coap);
    }
  

event coap_payload%(c: connection, version: count, type: count, code count, msgid: count, token: string, options: string, payload: string%;
    {
        c$coap= initialize_coap(c);
        c$coap$version = version;
        c$coap$typ = typ;
        c$coap$code = code;
        c$coap$msgid = msgid;
        c$coap$token = token;
        c$coap$options = options;
        c$coap$payload = payload;
        Log::write(Coap:LOG, c$coap);
    }

