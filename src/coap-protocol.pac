# Generated by binpac_quickstart

# ## TODO: Add your protocol structures in here.
# ## some examples:

# Types are your basic building blocks.
# There are some builtins, or you can define your own.
# Here's a definition for a regular expression:
# type coap_WHITESPACE = RE/[ \t]*/;

# A record is a collection of types.
# Here's one with the built-in types
# type example = record {
# 	
# };
# ## Message format from RFC7252
#    0                   1                   2                   3
#    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
#   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#   |Ver| T |  TKL  |      Code     |          Message ID           |
#   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#   |   Token (if any, TKL bytes) ...
#   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#   |   Options (if any) ...
#   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#   |1 1 1 1 1 1 1 1|    Payload (if any) ...
#   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
# ## Options Format from RFC7252
#    0   1   2   3   4   5   6   7
#   +---------------+---------------+
#   |               |               |
#   |  Option Delta | Option Length |   1 byte
#   |               |               |
#   +---------------+---------------+
#   \                               \
#   /         Option Delta          /   0-2 bytes
#   \          (extended)           \
#   +-------------------------------+
#   \                               \
#   /         Option Length         /   0-2 bytes
#   \          (extended)           \
#   +-------------------------------+
#   \                               \
#   /                               /
#   \                               \
#   /         Option Value          /   0 or more bytes
#   \                               \
#   /                               /
#   \                               \
#   +-------------------------------+
#


type coap_PDU = record {
    first_byte: uint8;
        code    :  uint8;
	    msgid	:  uint16;
        token   :  bytestring &length = TKL; #Indicates the length of the variable-length Token field (0-8 bytes).
        op_payload : OPPAYLOAD_PDU[] &unit($input.length()==0); 
} &let {
        version :  uint8 = (first_byte & 0xc0)>>6;  # First 2 bits of 8-bits value
        typ     :  uint8 = (first_byte & 0x30)>>4;  # Bits 3-4 of 8-bits value
        TKL     :  uint8 = (first_byte & 0x0f);     # Bits 5-8 of 8-bits value     
} &byteorder=bigendian;


type OPPAYLOAD_PDU(is_orig: bool) = record {
        options   :  uint32
        payload : bytestring &unit($input.length()==0); }

} &byteorder=bigendian;


