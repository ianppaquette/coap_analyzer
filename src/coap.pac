# Generated by binpac_quickstart

# Constrained Application Protocol (coap) for Zeek
#  - coap-protocol.pac: describes the coap protocol messages
#  - coap-analyzer.pac: describes the coap analyzer code

%include binpac.pac
%include zeek.pac

%extern{
	#include "events.bif.h"
%}

analyzer coap withcontext {
	connection: coap_Conn;
	flow:       coap_Flow;
};

# Our connection consists of two flows, one in each direction.
connection coap_Conn(bro_analyzer: BroAnalyzer) {
	upflow   = coap_Flow(true);
	downflow = coap_Flow(false);
};

%include coap-protocol.pac

# Now we define the flow:
flow coap_Flow(is_orig: bool) {

	# ## TODO: Determine if you want flowunit or datagram parsing:

	# Using flowunit will cause the anlayzer to buffer incremental input.
	# This is needed for &oneline and &length. If you don't need this, you'll
	# get better performance with datagram.

	# flowunit = coap_PDU(is_orig) withcontext(connection, this);
	datagram = coap_PDU(is_orig) withcontext(connection, this);

};

%include coap-analyzer.pac
